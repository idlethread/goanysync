# autoconf input (no go tool support yet)
#GOC = @GOC@
GOC = go
DEFS = @DEFS@
#LIBS = @LIBS@
#GOFLAGS = @GOFLAGS@

EDITOR_TERM     = urxvtc
SHELL           = @BASH_PATH@
SED             = @SED@
TXT2MAN         = @TXT2MAN_PATH@
GZIP            = @GZIP_PATH@
INSTALL         = @INSTALL@
INSTALL_DATA    = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT  = @INSTALL_SCRIPT@

# VPATH-specific substitution variables
srcdir = @srcdir@
VPATH  = @srcdir@

# @configure_input@
# Package-specific substitution variables
package  = @PACKAGE_NAME@
version  = @PACKAGE_VERSION@
tarname  = @PACKAGE_TARNAME@
distdir  = $(tarname)-$(version)
homepage = @PACKAGE_URL@
fullname = @fullname@

# Test to check if archlinux [yes,no]
# Affects the installation of rc.d script
is_archlinux = @is_archlinux@

# Prefix-specific
prefix      = @prefix@
bindir      = @bindir@
exec_prefix = @exec_prefix@
mandir      = @mandir@
sysconfdir  = @sysconfdir@
datarootdir = @datarootdir@
datadir     = @datadir@
libdir      = @libdir@

man1dir     = $(mandir)/man1/

INSTALL_SERVICE   = $(libdir)/systemd/system
INSTALL_RCD       = $(sysconfdir)/rc.d
INSTALL_CONFD     = $(sysconfdir)/conf.d
INSTALL_CRONJOB   = $(sysconfdir)/cron.hourly
INSTALL_TMPFILESD = @tmpfilesdir@
INSTALL_INITCONF  = @initdir@


SRCDIR_NAME := src
SRCDIR      := $(srcdir)/$(SRCDIR_NAME)
DOCDIR      := $(srcdir)/doc

SRC_POSTFIX := .go
DOC_POSTFIX := .man.txt
MAN_POSTFIX := .1.gz
SOURCES     := $(wildcard $(SRCDIR)/*/*/*$(SRC_POSTFIX))
DOC_SOURCES := $(wildcard $(DOCDIR)/*$(DOC_POSTFIX))

# Man page targets
MANPAGES := $(DOC_SOURCES:$(DOCDIR)/%=%)
MANPAGES := $(MANPAGES:%$(DOC_POSTFIX)=%$(MAN_POSTFIX))

# Autoconf generated files
AUTOCONF_GEN_FILES := Makefile \
	conf/$(package).cronjob conf/$(package).conf \
	conf/$(package).init.conf conf/$(package).service \
	misc/license-gpl3-header archlinux_pkg/PKGBUILD_dist \
	script/$(package)

##############################################

ifneq ($(and $(TXT2MAN),$(GZIP)),)
    DOC_PREQ = docs
else
    $(info Man page generation skipped without txt2man or gzip)
    DOC_PREQ =
endif

##############################################

.PHONY: all
all: $(AUTOCONF_GEN_FILES) $(package) $(DOC_PREQ)

.PHONY: docs
docs: $(MANPAGES)

# Create deb package for quick testing on debian based distributions
.PHONY: deb
deb: $(distdir)-1_i386.deb

$(package): $(SOURCES)
	GOPATH=$$(readlink -f $(srcdir)):$${GOPATH} $(GOC) build $(GOFLAGS) -o $(package) $(package)/$(package)

%$(MAN_POSTFIX): $(DOCDIR)/%$(DOC_POSTFIX)
	$(TXT2MAN) $^ | $(GZIP) -9 -c > $@

#
# Autoconf generated files
#
define RULE_template =
$(1): $(1).in
	./config.status $(1)
endef

$(foreach file,$(AUTOCONF_GEN_FILES),$(eval $(call RULE_template,$(file))))

config.status: configure
	./config.status --recheck

#
# install/uninstall
#

.PHONY: install
install: all
	if test "${is_archlinux}x" == "yesx"; then \
		$(INSTALL) -D --mode=0755 script/$(package) "$(DESTDIR)$(INSTALL_RCD)/$(package)"; \
		$(INSTALL) -D --mode=0755 conf/$(package).conf.d "$(DESTDIR)$(INSTALL_CONFD)/$(package)"; \
	fi
	$(INSTALL) -D --mode=0744 conf/$(package).cronjob   "$(DESTDIR)$(INSTALL_CRONJOB)/$(package)"
	# Subsitute shell variables in the cronjob file
	$(SED) -i -e 's|$${exec_prefix}|$(exec_prefix)|g' "$(DESTDIR)$(INSTALL_CRONJOB)/$(package)"
	if test "$(INSTALL_TMPFILESD)x" != "x"; then \
		$(INSTALL_DATA) -D conf/tmpfiles.conf "$(DESTDIR)$(INSTALL_TMPFILESD)/$(package).conf"; \
	fi
	if test "$(INSTALL_INITCONF)x" != "x"; then \
		$(INSTALL_DATA) -D conf/$(package).init.conf "$(DESTDIR)$(INSTALL_INITCONF)/$(package).conf"; \
		$(SED) -i -e 's|$${exec_prefix}|$(exec_prefix)|g' "$(DESTDIR)$(INSTALL_INITCONF)/$(package).conf"; \
	fi
	mkdir -p --mode=0755 \
		"$(DESTDIR)$(INSTALL_SERVICE)" \
		"$(DESTDIR)$(bindir)" \
		"$(DESTDIR)$(sysconfdir)" \
		"$(DESTDIR)$(man1dir)"
	$(INSTALL_DATA) --target-directory="$(DESTDIR)$(INSTALL_SERVICE)" conf/$(package).service
	# Subsitute shell variables in the systemd service file
	$(SED) -i -e 's|$${exec_prefix}|$(exec_prefix)|g' "$(DESTDIR)$(INSTALL_SERVICE)/$(package).service"
	$(INSTALL) --mode=0755 --target-directory="$(DESTDIR)$(bindir)" "$(package)"
	$(INSTALL_DATA) --target-directory="$(DESTDIR)$(sysconfdir)" conf/$(package).conf
	if test "$(DOC_PREQ)x" == "docsx"; then \
		$(INSTALL_DATA) --target-directory="$(DESTDIR)$(man1dir)" $(MANPAGES); \
	fi

.PHONY: uninstall
uninstall:
	-rm $(DESTDIR)$(bindir)/$(package)
	# TODO: add others and modify distcheck

#
# clean
#
.PHONY: maintainer-clean
maintainer-clean: clean distclean
	@#TODO?: aclocal.m4 missing
	rm -f \
		config.status \
		config.log \
		Makefile.am \
		$(AUTOCONF_GEN_FILES) \
		misc/license-gpl3-header.deb \
		configure \
		install-sh \
	rm -rf autom4te.cache

.PHONY: clean
clean:
	rm -f $(package)
	rm -f $(package)$(MAN_POSTFIX)

.PHONY: distclean
distclean:
	rm -f $(distdir).tar.gz
	rm -f $(package)_*.tar.gz
	rm -f $(package)_*.tar.xz
	rm -f $(package)_*.buildinfo
	rm -f $(package)_*.{dsc,deb,changes} # Remove deb package files
	if test -d $(distdir); then rm -rf $(distdir); fi

ifneq ($(GZIP),)
#
# dist creation (requires gzip)
#
.PHONY: dist
dist: $(distdir).tar.gz

$(distdir).tar.gz: $(distdir)
	tar chof - $(distdir) | $(GZIP) -9 -c > $@
	rm -rf $(distdir)

$(distdir): distclean FORCE
	mkdir -p $(distdir)
	cp $(srcdir)/configure.ac $(distdir)/
	cp $(srcdir)/configure $(distdir)/
	cp $(srcdir)/Makefile.in $(distdir)/
	cp $(srcdir)/README.md $(distdir)/
	# install-sh is created with "automake --add-missing --copy" and needed by
	# configure.
	cp $(srcdir)/install-sh $(distdir)/
	for s in $(SOURCES); do \
		mkdir -p $$(dirname $${s/#\./$(distdir)}); \
		cp $$s $${s/#\./$(distdir)}; \
		done
	mkdir -p $(distdir)/archlinux_pkg
	cp $(srcdir)/archlinux_pkg/PKGBUILD_dist.in $(distdir)/archlinux_pkg/
	mkdir -p $(distdir)/script
	cp $(srcdir)/script/$(package).in $(distdir)/script/
	mkdir -p $(distdir)/conf
	cp $(srcdir)/conf/tmpfiles.conf $(distdir)/conf/
	cp $(srcdir)/conf/$(package).conf.d $(distdir)/conf/
	cp $(srcdir)/conf/$(package).cronjob.in $(distdir)/conf/
	cp $(srcdir)/conf/$(package).service.in $(distdir)/conf/
	cp $(srcdir)/conf/$(package).conf.in $(distdir)/conf/
	cp $(srcdir)/conf/$(package).init.conf.in $(distdir)/conf/
	mkdir -p $(distdir)/doc
	cp $(srcdir)/doc/$(package)$(DOC_POSTFIX) $(distdir)/doc/
	mkdir -p $(distdir)/misc
	cp $(srcdir)/misc/*.in $(distdir)/misc/

$(distdir)-1_i386.deb: $(distdir).tar.gz
	$(GZIP) -cd $(distdir).tar.gz | tar xvf -
	cd $(distdir) && \
		DEBFULLNAME="$(fullname)" dh_make -c gpl3 -s -e @PACKAGE_BUGREPORT@ -f ../$(distdir).tar.gz
	# Modify debian/control
	$(SED) -i \
		-e 's|^\(Section: \).*$$|\1utils|' \
		-e 's|^\(Homepage: \).*$$|\1$(homepage)|'\
		-e 's|^\(Description: \).*$$|\1Directory symlinker and content syncer|' \
		-e 's|^ <.*>$$||' $(distdir)/debian/control # remove long description
	# Modify debian/copyright
	# First create needed license header format
	$(SED) -e 's/^[[:space:]]\+/ /' -e 's/^$$/ ./' misc/license-gpl3-header > misc/license-gpl3-header.deb
	$(SED) -i -e '/^License: <special/r misc/license-gpl3-header.deb' $(distdir)/debian/copyright
	rm -f misc/license-gpl3-header.deb
	$(SED) -i \
		-e 's|^\(Copyright: \)<years> <.*>$$|\12012 $(fullname) <@PACKAGE_BUGREPORT@>|' \
		-e 's|^\([[:space:]]\+\)<years> <.*>$$|\1|' \
		-e 's|^\(Source: <\).*>$$|\1$(homepage)>|'\
		-e 's|^\(License: \)<special.*>|\1GPL-3|' \
		-e '/^#.*/d' \
		-e '/^ <.\+>$$/d' \
		$(distdir)/debian/copyright
	new_deps="$$(dpkg-depcheck -d ./configure 2>/dev/null \
		| grep -A 999 '^Packages needed:$$' \
		| tail -n+2 \
		| $(SED) 's/$$/,/' \
		| xargs \
		| $(SED) 's/,$$//')" && \
		$(SED) -i -e "s|^\(Build-Depends: .*\)$$|\1, rsync, $$new_deps|" $(distdir)/debian/control # add dependencies
	# Modify debian/changelog
	$(SED) -i \
		-e 's|\((Closes: #\)n\+) .*$$|\11)|' \
		$(distdir)/debian/changelog
	cd $(distdir) && \
		if test -e "Makefile"; then make maintainer-clean; fi
	cd $(distdir) && \
		dpkg-buildpackage -rfakeroot

.PHONY: distcheck
distcheck: $(distdir).tar.gz
	$(GZIP) -cd $(distdir).tar.gz | tar xvf -
	cd $(distdir) && ./configure
	cd $(distdir) && $(MAKE) all
	cd $(distdir) && $(MAKE) DESTDIR=/tmp/_temp_$(package)_inst install
	rm -rf $(distdir)
	rm -rf /tmp/_temp_$(package)_inst
endif

# Format all source with gofmt
.PHONY: gofmt
gofmt: $(SOURCES)
	for s in $(SOURCES); do \
		gofmt -w=true -tabwidth=4 -tabs=false $${s}; \
	done

.PHONY: edit
edit: $(SOURCES)
	if test -n "$(EDITOR_TERM)"; then \
		$(EDITOR_TERM) -e $(EDITOR) $(SOURCES); \
	else \
		$(EDITOR) $(SOURCES); \
	fi

.PHONY: FORCE
FORCE:

